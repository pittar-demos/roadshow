apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  name: policy-gitops-operator
  annotations:
    policy.open-cluster-management.io/standards: DevOps
    policy.open-cluster-management.io/categories: GitOps
    policy.open-cluster-management.io/controls: Argo CD Operator
spec:
  remediationAction: enforce
  disabled: false
  policy-templates:
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gitops-operator-rbac
        spec:
          remediationAction: inform
          severity: high
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRole
                metadata:
                  annotations:
                    argocd.argoproj.io/sync-options: Prune=false
                  name: openshift-gitops-extended-clusterrole
                  namespace: openshift-gitops
                rules:
                  - apiGroups:
                    - kafka.strimzi.io
                    resources:
                      - '*'
                    verbs:
                      - '*'
                  - apiGroups:
                    - monitoring.coreos.com
                    resources:
                      - '*'
                    verbs:
                      - '*'
                  - apiGroups:
                    - integreatly.org
                    resources:
                      - '*'
                    verbs:
                      - '*'
            - complianceType: musthave
              objectDefinition:
                kind: ClusterRoleBinding
                apiVersion: rbac.authorization.k8s.io/v1
                metadata:
                  annotations:
                    argocd.argoproj.io/sync-options: Prune=false
                  name: openshift-gitops-extended-clusterrolebinding
                  namespace: openshift-gitops
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: openshift-gitops-extended-clusterrole
                subjects:
                  - kind: ServiceAccount
                    name: openshift-gitops-argocd-application-controller
                    namespace: openshift-gitops
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-gitops-operator
        spec:
          remediationAction: inform
          severity: high
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: operators.coreos.com/v1alpha1
                kind: Subscription
                metadata:
                  name: openshift-gitops-operator
                  namespace: openshift-operators
                spec:
                  channel: stable
                  installPlanApproval: Automatic
                  name: openshift-gitops-operator
                  source: redhat-operators
                  sourceNamespace: openshift-marketplace
    - objectDefinition:
        apiVersion: policy.open-cluster-management.io/v1
        kind: ConfigurationPolicy
        metadata:
          name: policy-openshift-gitops-instance
        spec:
          remediationAction: inform
          severity: high
          object-templates:
            - complianceType: musthave
              objectDefinition:
                apiVersion: argoproj.io/v1alpha1
                kind: ArgoCD
                metadata:
                  name: openshift-gitops
                  namespace: openshift-gitops
                spec:
                  server:
                    insecure: true
                    route:
                      enabled: true
                      tls:
                        insecureEdgeTerminationPolicy: Redirect
                        termination: edge
                  resourceCustomizations: |
                    bitnami.com/SealedSecret:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.conditions ~= nil then
                            for i, condition in ipairs(obj.status.conditions) do
                              if condition.type == "Synced" and condition.status == "False" then
                                hs.status = "Degraded"
                                hs.message = condition.message
                                return hs
                              end
                              if condition.type == "Synced" and condition.status == "True" then
                                hs.status = "Healthy"
                                hs.message = condition.message
                                return hs
                              end
                            end
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for sync status"
                        return hs
                    integreatly.org/GrafanaDataSource:
                      ignoreDifferences: |
                        jsonPointers:
                        - /spec/datasources/0/secureJsonData/httpHeaderValue1
                    build.openshift.io/BuildConfig:
                      ignoreDifferences: |
                        jsonPointers:
                        - /status/lastVersion
                    route.openshift.io/Route:
                      ignoreDifferences: |
                        jsonPointers:
                        - /status/ingress
                    /ServiceAccount:
                      ignoreDifferences: |
                        jsonPointers:
                        - /imagePullSecrets
                    PersistentVolumeClaim:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.phase ~= nil then
                            if obj.status.phase == "Pending" then
                              hs.status = "Healthy"
                              hs.message = obj.status.phase
                              return hs
                            end
                            if obj.status.phase == "Bound" then
                              hs.status = "Healthy"
                              hs.message = obj.status.phase
                              return hs
                            end
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for certificate"
                        return hs
                    Job:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil then
                          if obj.status.active ~= nil then
                            if obj.status.active == "1" then
                              hs.status = "Progressing"
                              hs.message = obj.status.active .. " active job(s)."
                              return hs
                            end
                          end
                          if obj.status.succeeded ~= nil then
                            if obj.status.succeeded == 1 then
                              hs.status = "Healthy"
                              hs.message = "Job completed successfully."
                              return hs
                            end
                          end
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for Job to complete."
                        return hs
                    platform.stackrox.io/Central:
                      health.lua: |
                        hs = {}
                        if obj.status ~= nil and obj.status.conditions ~= nil then
                            for i, condition in ipairs(obj.status.conditions) do
                                if condition.status == "True" and (condition.reason == "InstallSuccessful" or condition.reason =="UpgradeSuccessful") then
                                    hs.status = "Healthy"
                                    hs.message = condition.message
                                    return hs
                                end
                            end
                        end
                        hs.status = "Progressing"
                        hs.message = "Waiting for Central to deploy."
                        return hs
                  rbac:
                    defaultPolicy: 'role:admin'
                    policy: |
                      g, openshift-gitops-admins, role:admin
                    scopes: '[groups]'
                  resourceExclusions: |
                    - apiGroups:
                      - tekton.dev
                      clusters:
                      - '*'
                      kinds:
                      - TaskRun
                  dex:
                    openShiftOAuth: true
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 250m
                        memory: 128Mi
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  name: binding-policy-gitops-operator
placementRef:
  name: placement-policy-gitops-operator
  kind: PlacementRule
  apiGroup: apps.open-cluster-management.io
subjects:
  - name: policy-gitops-operator
    kind: Policy
    apiGroup: policy.open-cluster-management.io
---
apiVersion: apps.open-cluster-management.io/v1
kind: PlacementRule
metadata:
  name: placement-policy-gitops-operator
spec:
  clusterConditions:
    - status: 'True'
      type: ManagedClusterConditionAvailable
  clusterSelector:
    matchExpressions:
      - key: demo
        operator: In
        values:
          - "security"
          - "monitoring"
          - "devops"
          - "gitops"
          - "all"
